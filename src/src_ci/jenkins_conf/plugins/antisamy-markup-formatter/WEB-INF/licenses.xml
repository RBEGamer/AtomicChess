<?xml version="1.0" encoding="UTF-8"?>
<l:dependencies xmlns:l='licenses' groupId='org.jenkins-ci.plugins' artifactId='antisamy-markup-formatter' version='2.1'><l:dependency name='OWASP Markup Formatter Plugin' groupId='org.jenkins-ci.plugins' artifactId='antisamy-markup-formatter' version='2.1' url='https://github.com/jenkinsci/antisamy-markup-formatter-plugin'><l:description>Sanitize HTML markup in user-submitted text to be displayed on the Jenkins UI.</l:description><l:license name='MIT' url='https://opensource.org/licenses/MIT'/></l:dependency><l:dependency name='FindBugs-jsr305' groupId='com.google.code.findbugs' artifactId='jsr305' version='3.0.2' url='http://findbugs.sourceforge.net/'><l:description>JSR305 Annotations for Findbugs</l:description><l:license name='The Apache Software License, Version 2.0' url='http://www.apache.org/licenses/LICENSE-2.0.txt'/></l:dependency><l:dependency name='OWASP Java HTML Sanitizer' groupId='com.googlecode.owasp-java-html-sanitizer' artifactId='owasp-java-html-sanitizer' version='20191001.1' url='https://github.com/OWASP/java-html-sanitizer/owasp-java-html-sanitizer'><l:description>Takes third-party HTML and produces HTML that is safe to embed in
    your web application.
    Fast and easy to configure.</l:description><l:license name='Apache License, Version 2.0' url='http://www.apache.org/licenses/LICENSE-2.0.txt'/></l:dependency><l:dependency name='Checker Qual' groupId='org.checkerframework' artifactId='checker-qual' version='2.5.2' url='https://checkerframework.org'><l:description>Checker Qual is the set of annotations (qualifiers) and supporting classes
        used by the Checker Framework to type check Java source code.  Please
        see artifact:
        org.checkerframework:checker</l:description><l:license name='The MIT License' url='http://opensource.org/licenses/MIT'/></l:dependency><l:dependency name='Guava InternalFutureFailureAccess and InternalFutures' groupId='com.google.guava' artifactId='failureaccess' version='1.0.1' url='https://github.com/google/guava/failureaccess'><l:description>Contains
    com.google.common.util.concurrent.internal.InternalFutureFailureAccess and
    InternalFutures. Most users will never need to use this artifact. Its
    classes is conceptually a part of Guava, but they're in this separate
    artifact so that Android libraries can use them without pulling in all of
    Guava (just as they can use ListenableFuture by depending on the
    listenablefuture artifact).</l:description><l:license name='The Apache Software License, Version 2.0' url='http://www.apache.org/licenses/LICENSE-2.0.txt'/></l:dependency><l:dependency name='error-prone annotations' groupId='com.google.errorprone' artifactId='error_prone_annotations' version='2.2.0' url='http://nexus.sonatype.org/oss-repository-hosting.html/error_prone_parent/error_prone_annotations'><l:description>Sonatype helps open source projects to set up Maven repositories on https://oss.sonatype.org/</l:description><l:license name='Apache 2.0' url='http://www.apache.org/licenses/LICENSE-2.0.txt'/></l:dependency><l:dependency name='Guava ListenableFuture only' groupId='com.google.guava' artifactId='listenablefuture' version='9999.0-empty-to-avoid-conflict-with-guava' url='https://github.com/google/guava/listenablefuture'><l:description>An empty artifact that Guava depends on to signal that it is providing
    ListenableFuture -- but is also available in a second "version" that
    contains com.google.common.util.concurrent.ListenableFuture class, without
    any other Guava classes. The idea is:

    - If users want only ListenableFuture, they depend on listenablefuture-1.0.

    - If users want all of Guava, they depend on guava, which, as of Guava
    27.0, depends on
    listenablefuture-9999.0-empty-to-avoid-conflict-with-guava. The 9999.0-...
    version number is enough for some build systems (notably, Gradle) to select
    that empty artifact over the "real" listenablefuture-1.0 -- avoiding a
    conflict with the copy of ListenableFuture in guava itself. If users are
    using an older version of Guava or a build system other than Gradle, they
    may see class conflicts. If so, they can solve them by manually excluding
    the listenablefuture artifact or manually forcing their build systems to
    use 9999.0-....</l:description><l:license name='The Apache Software License, Version 2.0' url='http://www.apache.org/licenses/LICENSE-2.0.txt'/></l:dependency><l:dependency name='J2ObjC Annotations' groupId='com.google.j2objc' artifactId='j2objc-annotations' version='1.1' url='https://github.com/google/j2objc/'><l:description>A set of annotations that provide additional information to the J2ObjC
    translator to modify the result of translation.</l:description><l:license name='The Apache Software License, Version 2.0' url='http://www.apache.org/licenses/LICENSE-2.0.txt'/></l:dependency><l:dependency name='Guava: Google Core Libraries for Java' groupId='com.google.guava' artifactId='guava' version='27.1-jre' url='https://github.com/google/guava/guava'><l:description>Guava is a suite of core and expanded libraries that include
    utility classes, google's collections, io classes, and much
    much more.</l:description><l:license name='The Apache Software License, Version 2.0' url='http://www.apache.org/licenses/LICENSE-2.0.txt'/></l:dependency></l:dependencies>